<?xml version="1.0" encoding="UTF-8"?>
<!--
    'run_tests' target installs protractor if it is not installed and  then runs protractor

    If you set 'sauceUser' and 'sauceKey' in protractorConfig.js the  tests will run on sauceLabs.

    To run on jenkins with saucelabs use 'run_tests' .


-->
<project  default="run_all_tests">
    <property name="basedir" value="."/>
    <property name="protractor.conf" value="./protractor.config.js"/>
    <property name="solution.name" value=""/>

    <!-- checks if used dependencies from package.json are outdated .Should be used manualy from time to time-->
    <target name="check_outdated">
        <exec executable="bash" dir="${basedir}" osfamily="unix"
                    failonerror="true">
            <arg value="-c"/>
            <arg value="npm outdated"/>
        </exec>
        <exec executable="cmd" dir="${basedir}" osfamily="windows"
                    failonerror="true">
            <arg value="/c" />
            <arg value="npm"/>
            <arg value="outdated"/>
        </exec>
    </target>
    <!-- PROTRACTOR INSTALL TASKS -->
    <!-- used to run install protractor only once -->
    <target name="protractor_installed_check" >
        <condition property="protractor.installed">
            <available file="./node_modules" type="dir"/>
        </condition>
    </target>

    <target name="install_protractor_if_necessary" depends="protractor_installed_check" unless="protractor.installed">
        <antcall target="install_protractor"/>
    </target>

    <!-- installs protractor with it's dependencies  based on package.json file  run only once-->
    <target name="install_protractor">
        <exec executable="cmd" dir="${basedir}" osfamily="windows"
            failonerror="true">
            <arg line="/c npm config set color false" />
        </exec>
        <exec executable="bash" dir="${basedir}" osfamily="unix"
            failonerror="true">
            <arg value="-c" />
            <arg value="npm config set color false"/>
        </exec>

        <exec executable="cmd" dir="${basedir}" osfamily="windows"
            failonerror="true">
            <arg line="/c npm install" />
        </exec>
        <exec executable="bash" dir="${basedir}" osfamily="unix"
            failonerror="true">
            <arg line="-c" />
            <arg value="npm install"/>
        </exec>
    </target>

    <!-- RUNNING TASKS -->

    <target name="run_all_tests" depends="run_protractor_tests, run_selenium_tests" />

    <!-- use this target for jenkins and saucelabs .  It does not require selenium webdiver which is 44 mb -->
    <target name="run_protractor_tests" depends="install_protractor_if_necessary">
        <exec executable="cmd" dir="${basedir}" osfamily="windows"
                    failonerror="true">
            <arg value="/c"/>
            <arg value="node_modules\.bin\protractor"/>
            <arg value="${protractor.conf}"/>
            <arg value="--params.solutionName=${solution.name}"/>
        </exec>
        <property name="temp1" value="node ./node_modules/.bin/protractor ${protractor.conf} --params.solutionName=${solution.name}"/>
        <exec executable="bash" dir="${basedir}" osfamily="unix"
                            failonerror="true">
            <arg value="-c"/>
            <arg value="${temp1}"/>
        </exec>
    </target>

    <target name="run_selenium_tests" depends="get_selenese_tests_cmd">
        <echo message="Run selenium scripts started"/>
        <echo message="Solution name ${solution.name}"/>

        <for param="cmdline" list="${selenese.cmds}" delimiter=",">
            <sequential>
                <echo message= "@{cmdline}"/>
                <antcall target="run_selenese">
                    <param name="selenese.cmdline" value="@{cmdline}"/>
                </antcall>
            </sequential>
        </for>
    </target>

    <!-- run selenese-runner from commandline -->
    <target name="run_selenese">
        <!-- <echo message="Run ${selrunner.cmdline}"/> -->

        <exec executable="cmd" dir="${basedir}" osfamily="windows" failonerror="false" resultproperty="exitCode">
            <arg line="${selenese.cmdline}"/>
        </exec>

        <exec executable="java" dir="${basedir}" osfamily="unix" failonerror="false" resultproperty="exitCode">
            <arg line="${selenese.cmdline}"/>
        </exec>

        <condition property="tests_failed">
            <or>
                <equals arg1="${exitCode}" arg2="1"/>
                <equals arg1="${exitCode}" arg2="3"/>
                <equals arg1="${exitCode}" arg2="4"/>
                <equals arg1="${exitCode}" arg2="5"/>
            </or>
        </condition>

        <fail if="tests_failed" message="FAILED: Test execution failed for one of the test solutions; see messages above."/>
    </target>

    <!-- Build the command line to execute selenese-runner java -jar selenese-runner.jar -c ${selrunner.conf} [selrunner.config.json] ui_tests/solName/*_test -->
    <target name="get_selenese_tests_cmd" depends="get_os_family">
        <script language="javascript">
            <![CDATA[
            var File = java.io.File;
            var FileReader = java.io.FileReader;
            var BufferedReader = java.io.BufferedReader;
            var FileWriter = java.io.FileWriter;
            var BufferedWriter = java.io.BufferedWriter;

            var isWindows = project.getProperty("isWindows");

            // recursive function to get all files in directory having matching criteria
            function getFiles(directoryPath, files) {
                var directory = new File(directoryPath);
                var fList = directory.listFiles();
                if (!fList) {
                    return;
                }

                // get all the files from a directory
                for (var j=0; j<fList.length; j++) {
                    var file = fList[j];
                    if (file.isFile()) {
                        // only test suites with name *_test
                        var reg = new RegExp(/_test$/)
                        if (reg.test(file)) {
                            files.push(file.getAbsolutePath());
                        }
                    } else if (file.isDirectory()) {
                        getFiles(file.getAbsolutePath(), files);
                    }
                }
            }

            // read properties from file selenese.config.json
            echo = project.createTask("echo");
            echo.setMessage("Parsing selenese.config.json");
            echo.perform();

            var file = new File("e2e/selenese.config.json");
            fr = new FileReader(file);
            br = new BufferedReader(fr);

            // Read the whole json file.
            var json = "";
            do {
                var text = br.readLine();
                if (text) {
                    json += text;
                }
            } while (text);
            br.close();

            echo = project.createTask("echo");
            echo.setMessage("Read selenese.config.json");
            echo.perform();

            // Evaluate the JSON.
            var struct = eval("(" + json + ")");

            var cmds = "";

            // Run selenese-runner for each configuration in the selenese.config.json
            // It assumes the file is an Array of JSON objects well formatted
            for (config in struct) {
                var cmdLine = isWindows == 'true' ? "/c java -jar ./selenese-runner.jar -c ./selenese.properties" : "-jar ./selenese-runner.jar -c ./selenese.properties";

                // add each option specified in the selenese.config
                for (option in struct[config]) {
                    cmdLine += " " + option + " " + struct[config][option];
                }

                var directory = project.getProperty("e2e.scripts.dir") + "/selenium/";
                directory += project.getProperty("solution.name");

                var files = [];
                getFiles(directory, files);
                cmdLine += " " + files.join(" ");

                cmds = cmds + cmdLine + ",";
            }

            // remove comma from last item
            if (cmds.length) {
                cmds = cmds.substring(0, cmds.length-1);
            }

            // store all command lines
            project.setProperty("selenese.cmds", cmds);
        ]]>
        </script>
    </target>

    <target name="get_os_family">
        <condition value="true" property="isWindows">
            <os family="windows"/>
        </condition>
        <condition value="false" property="isWindows">
            <os family="unix"/>
        </condition>
        <echo message="Running on Windows: ${isWindows}"/>
    </target>

</project>
